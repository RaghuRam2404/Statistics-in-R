# Install the tool to download packages from Github
install.packages("devtools")
install.packages("dplyr")
library(devtools)
install_github("StatsWithR/statsr")
load("/Users/raghu-2264/Documents/Statistics with R - Coursera/Course 5 - Capestone Project/Week 6/ames_train.Rdata")
ames_train <- ames_train %>%
filter(Sale.Condition == "Normal")
library(statsr)
library(PairedData)
library(dplyr)
library(ggplot2)
library(devtools)
library(MASS)
library(BAS)
ames_train <- ames_train %>%
filter(Sale.Condition == "Normal")
model.full <- lm(log(price) ~ Overall.Qual + log(Garage.Area + 1) +
log(Total.Bsmt.SF + 1) + Garage.Cars + log(area) +
Full.Bath + Half.Bath +
Bedroom.AbvGr + Year.Built + log(X1st.Flr.SF) +
log(X2nd.Flr.SF + 1) +
log(Lot.Area) +  Central.Air + Overall.Cond,
data = ames_train)
model.AIC <- stepAIC(model.full, k = 2)
load("/Users/raghu-2264/Documents/Statistics with R - Coursera/Course 5 - Capestone Project/Week 6/ames_test.Rdata")
predict(model.AIC, ames_test)
predict(model.AIC, ames_train)
predict(model.AIC, ames_test)
mean(predict(model.AIC, ames_test))
exp(mean(predict(model.AIC, ames_test)))
# Extract Predictions
predict.full <- exp(predict(model.full, ames_test))
# Extract Residuals
resid.full <- ames_test$price - predict.full
# Calculate RMSE
rmse.full <- sqrt(mean(resid.full^2))
rmse.full
predict.full_aic <- exp(predict(model.AIC, ames_test))
resid.full_aic <- ames_test$price - predict.full_aic
rmse.full_aic <- sqrt(mean(resid.full_aic^2))
rmse.full_aic
#For ames_test, model.AIC
predict.full_aic <- exp(predict(model.AIC, ames_test))
resid.full_aic <- ames_test$price - predict.full_aic
rmse.full_aic <- sqrt(mean(resid.full_aic^2))
#For ames_training, model.full
predict.full_train <- exp(predict(model.full, ames_train))
resid.full_train <- ames_train$price - predict.full_train
rmse.full_train <- sqrt(mean(resid.full_train^2))
#For ames_training, model.AIC
predict.full_aic_train <- exp(predict(model.AIC, ames_train))
resid.full_aic_train <- ames_train$price - predict.full_aic_train
rmse.full_aic_train <- sqrt(mean(resid.full_aic_train^2))
#test with model.full
rmse.full
#train with model.AIC
rmse.full_train
#train with model.full
rmse.full_aic_train
#test with model.AIC
rmse.full_aic
predict.full <- exp(predict(model.full, ames_test, interval = "prediction"))
# Calculate proportion of observations that fall within prediction intervals
coverage.prob.full <- mean(ames_test$price > predict.full[,"lwr"] &
ames_test$price < predict.full[,"upr"])
coverage.prob.full
predict.full
model.BIC <- bas.lm(log(price) ~ Overall.Qual + log(Garage.Area + 1) + log(Total.Bsmt.SF + 1) + Garage.Cars + log(area) + Full.Bath + Half.Bath + Bedroom.AbvGr + Year.Built + log(X1st.Flr.SF) + log(X2nd.Flr.SF + 1) + log(Lot.Area) +  Central.Air + Overall.Cond, prior="BIC", modelprior=uniform(), data=ames_train)
predict.BIC <- exp(predict(model.BIC, ames_test, interval = "prediction"))
coverage.prob.BIC <- mean(ames_test$price > predict.BIC[,"lwr"] &
ames_test$price < predict.BIC[,"upr"])
coverage.prob.BIC
predict.BIC <- exp(predict(model.BIC, ames_test, interval = "prediction"))
coverage.prob.BIC <- mean(ames_test$price > predict.BIC[,"lwr"] &
ames_test$price < predict.BIC[,"upr"])
coverage.prob.BIC
predict.BIC <- exp(predict(model.BIC, ames_test, interval = "prediction"))
model.BIC <- bas.lm(log(price) ~ Overall.Qual + log(Garage.Area + 1) + log(Total.Bsmt.SF + 1) + Garage.Cars + log(area) + Full.Bath + Half.Bath + Bedroom.AbvGr + Year.Built + log(X1st.Flr.SF) + log(X2nd.Flr.SF + 1) + log(Lot.Area) +  Central.Air + Overall.Cond, prior="BIC", modelprior=uniform(), data=ames_train)
model.BIC
predict.BIC <- exp(predict(model.BIC, ames_test, interval = "prediction"))
predict(model.BIC, ames_test, interval = "prediction")
predict(model.BIC, ames_test, interval = "prediction")
predict(model.full, ames_test, interval = "prediction")
predict(model.BIC, ames_test, interval = "prediction")
predict.BIC <- predict(model.BIC, ames_test, interval = "prediction")
View(predict.BIC)
help(predict)
predict.BIC <- predict(model.BIC, ames_test, interval = "prediction", estimator = "BMA")
View(predict.BIC)
predict.BIC[["Ypred"]]
predict.BIC <- exp(predict(model.BIC, ames_test, interval = "prediction"))
exp(predict(model.BIC, ames_test))
predict(model.BIC, ames_test)
predict.BIC <- exp(predict(model.BIC, ames_test, interval = "prediction", se.fit = TRUE))
predict.BIC <- exp(predict(model.BIC, newdata=ames_test, estimator="BPM", interval = "prediction"))
k.BIC = log(nrow(ames_train))
model.BIC = stepAIC(model.full, k = k.BIC)
predict.BIC <- exp(predict(model.BIC, ames_test, interval = "prediction"))
coverage.prob.BIC <- mean(ames_test$price > predict.BIC[,"lwr"] & ames_test$price < predict.BIC[,"upr"])
coverage.prob.BIC
